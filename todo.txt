# Packrat Development Todo List

## Phase 1: File Explorer UI (Completed)
- [x] Set up project structure
- [x] Implement basic file explorer with navigation
- [x] Implement chroot functionality to prevent going above root
- [x] Add page up/page down navigation
- [x] Add home/end navigation
- [x] Fix any bugs in file explorer navigation
- [x] Add tests for Phase 1 functionality

## Phase 2: Text Viewer & Scrolling (Completed)
- [x] Implement basic text viewer that opens when a file is selected
- [x] Add vertical scrolling with keyboard controls
- [x] Add proper file content display
- [x] Handle large files efficiently
- [x] Exit back to file explorer
- [x] Add test for opening a text file and verifying content display
- [x] Add test for scrolling through file content
- [x] Add test for boundary conditions (no over-scrolling)
- [x] Add test for exiting and re-entering the viewer (state persistence)
- [x] Fix file opening with right arrow / L key
- [x] Add test for opening file with different key bindings

## Phase 2.5: Cleanup & UI Improvements (Completed)
- [x] Replace file/folder icons with cleaner Unicode symbols
- [x] Implement help panel with ? key for detailed shortcuts
- [x] Ensure status line is compact and fits in small terminals
- [x] Clean up unused imports and warnings in cargo
- [x] Optimize UI layout by moving titles into content blocks
- [x] Center titles in block headers for improved aesthetics
- [x] Add debug mode with UI state capture (Ctrl+D) for viewing the rendered UI
- [x] Improve debug message display with overlay at bottom of screen

## Phase 2.6: UI Fixes & Enhancements (Completed)
- [x] Fix ESC key to exit both help panel and viewer modes consistently
- [x] Update explorer mode to handle ESC key (should exit application)
- [x] Fix text color in light mode for text viewer
- [x] Update status line and debug text colors for better visibility in light mode
- [x] Reorder status line to prioritize help option for better visibility in small windows

## Phase 3: Line-Based Text Selection & Highlighting (Completed)
- [x] Implement line-based cursor movement
- [x] Add selection mode toggle with Space key
- [x] Track selected lines when cursor moves in selection mode
- [x] Add visual highlighting for selected lines
- [x] Allow exiting selection mode with Space key
- [x] Ensure selection persists when exiting selection mode
- [x] Reset selection when appropriate (new file)
- [x] Add tests for line selection functionality

## Phase 3.5: Vim-like Text Editing
- [x] Research and evaluate EdTUI as a replacement for tui-textarea
- [x] Add EdTUI dependency to Cargo.toml
- [x] Refactor editor module to use EdTUI instead of tui-textarea
- [x] Customize cursor styling in EdTUI to look more like traditional Vim cursor
- [x] Fix Ctrl+S behavior to properly chunk files instead of trying to save locally
- [x] Add support for Vim commands like `:wq`, `:q!`, etc.
- [x] Implement proper content transfer between viewer and editor
- [x] Ensure edited content is saved when chunking
- [x] Update key bindings documentation for Vim-like controls
- [x] Add tests for text editing functionality
- [x] Create stress tests to verify original files are never modified

## Phase 4: Chunk Saving & Tracking
- [x] Implement saving selected lines as chunk with 'S' key
- [x] Support saving edited content from editor mode instead of original content
- [x] Create chunks directory if it doesn't exist (./chunks/ by default)
- [x] Create filename scheme for chunks: path_from_root_converted_to_underscores_START-END.txt (e.g., /foo/bar.py â†’ foo_bar_py_3-10.txt)
- [x] Track original selected region in source file even if chunk content is edited
- [x] Add chunk metadata format tracking: original file path, start/end lines, edit status, etc.
- [x] Implement tracking of which lines have been chunked for each file
- [x] Highlight saved chunks in the viewer with different color than selections
- [x] Implement chunk overlap detection and warn users
- [x] Update file explorer to show chunking progress (color-code files)
- [x] Update status indicators after chunking to show progress
- [x] Add Viewer mode indicator when viewing files with chunks
- [ ] Create mechanism to list and browse all chunks for a file
- [x] Add tests for chunk saving functionality
- [x] Add test to verify chunk content matches edited version when using editor mode
- [x] Persist chunk highlighting between sessions
- [x] Add gitignore entry for chunks directory

## Data Safety Tests (Critical)
- [x] Create comprehensive test suite to verify original files are never modified
- [x] Test all paths: direct chunking, edit-then-chunk, undo/redo, filesystem events
- [x] Add file integrity checks before and after operations
- [ ] Implement test with filesystem monitoring to detect unauthorized writes
- [ ] Add stress tests with simulated crashes to ensure data safety
- [ ] Document data safety guarantees in README

## Phase 4.5: Token Analysis (Completed)
- [x] Add Claude tokenizer (tiktoken-rs) for real-time token counting
- [x] Implement token counting for selections and files
- [x] Display token counts in the viewer UI (top right of screen)
- [x] Add visual warnings for selections exceeding token limits
- [x] Show token percentage relative to maximum allowed tokens
- [x] Add configurable maximum token count
- [x] Color-code token counts based on usage percentage

## Phase 5: Filesystem Monitoring
- [ ] Implement file system watching with Notify crate
- [ ] Update UI when files change externally
- [ ] Track chunk files and update highlights accordingly
- [ ] Add tests for filesystem monitoring

## Phase 6: Undo Feature
- [ ] Implement undo for last chunk with 'R' key
- [ ] Maintain an undo stack for tracking chunks
- [ ] Optionally implement redo with Shift+R
- [ ] Update UI highlights when undoing/redoing
- [ ] Add tests for undo/redo functionality

## Phase 7: Polish & Further Stretch Goals
- [ ] Add configuration file support (TOML/YAML)
- [ ] Implement custom keybindings
- [ ] Add Alacritty theme support
- [ ] Improve error handling for permission issues
- [ ] Add performance optimizations for large files
- [ ] Consider enhancements to editor functionality